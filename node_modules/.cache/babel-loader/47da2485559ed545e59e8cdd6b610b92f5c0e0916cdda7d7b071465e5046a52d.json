{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport ShowResult from \"./ShowResult\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Question = () => {\n  _s();\n  const [Question, setQuestion] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [clickedOption, setClickedOption] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n  const changeQuestion = () => {\n    updateScore();\n    if (currentQuestion < Question.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      setClickedOption(0);\n    } else {\n      setShowResult(true);\n    }\n  };\n  const updateScore = () => {\n    if (clickedOption === Question[currentQuestion].answer) {\n      setScore(score + 1);\n    }\n  };\n  // const resetAll = () => {\n  //   setShowResult(false);\n  //   setCurrentQuestion(0);\n  //   setClickedOption(0);\n  //   setScore(0);\n  // };\n\n  //lifeCycle function\n  useEffect(() => {\n    const getQuestion = async () => {\n      try {\n        const {\n          data\n        } = await axios.get(\"http://localhost:5000/api/user/question/1\");\n        console.log(data.questions);\n        if (data) {\n          setQuestion(data.questions);\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getQuestion();\n    console.log(Question);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  // <div>\n  //   <p className=\"heading-txt\">Inbound Test</p>\n  //   <div className=\"container\">\n  //     {showResult ? (\n  //       <ShowResult score={score} totalScore={Question.length} />\n  //     ) : (\n  //       <>\n  //         <div className=\"question\">\n  //           <span id=\"question-number\">{currentQuestion + 1}. </span>\n  //           {/* <span id=\"question-txt\">\n  //             {Question[currentQuestion].question}\n  //           </span> */}\n  //         </div>\n  //         <div className=\"option-container\">\n  //           {Question[currentQuestion].options.map((option, i) => {\n  //             return (\n  //               <button\n  //                 // className=\"option-btn\"\n  //                 className={`option-btn ${\n  //                   clickedOption == i + 1 ? \"checked\" : null\n  //                 }`}\n  //                 key={i}\n  //                 onClick={() => setClickedOption(i + 1)}\n  //               >\n  //                 {option}\n  //               </button>\n  //             );\n  //           })}\n  //         </div>\n  //         <input\n  //           type=\"button\"\n  //           value=\"Next\"\n  //           id=\"next-button\"\n  //           onClick={changeQuestion}\n  //         />\n  //       </>\n  //     )}\n  //   </div>\n  // </div>\n  ;\n};\n_s(Question, \"XEiB/sySrsIr6/t5KlfQI+2jljw=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useEffect","useState","axios","ShowResult","Fragment","_Fragment","jsxDEV","_jsxDEV","Question","_s","setQuestion","currentQuestion","setCurrentQuestion","score","setScore","clickedOption","setClickedOption","showResult","setShowResult","changeQuestion","updateScore","length","answer","getQuestion","data","get","console","log","questions","error","message","_c","$RefreshReg$"],"sources":["C:/Users/TF/Desktop/hubspotTest/client/src/components/Question.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport ShowResult from \"./ShowResult\";\r\n\r\nconst Question = () => {\r\n  const [Question, setQuestion] = useState([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [clickedOption, setClickedOption] = useState(0);\r\n  const [showResult, setShowResult] = useState(false);\r\n\r\n  const changeQuestion = () => {\r\n    updateScore();\r\n    if (currentQuestion < Question.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n      setClickedOption(0);\r\n    } else {\r\n      setShowResult(true);\r\n    }\r\n  };\r\n  const updateScore = () => {\r\n    if (clickedOption === Question[currentQuestion].answer) {\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n  // const resetAll = () => {\r\n  //   setShowResult(false);\r\n  //   setCurrentQuestion(0);\r\n  //   setClickedOption(0);\r\n  //   setScore(0);\r\n  // };\r\n\r\n  //lifeCycle function\r\n  useEffect(() => {\r\n    const getQuestion = async () => {\r\n      try {\r\n        const { data } = await axios.get(\r\n          \"http://localhost:5000/api/user/question/1\"\r\n        );\r\n        console.log(data.questions);\r\n        if (data) {\r\n          setQuestion(data.questions);\r\n        }\r\n      } catch (error) {\r\n        console.log(error.message);\r\n      }\r\n    };\r\n    getQuestion();\r\n    console.log(Question);\r\n  }, []);\r\n  return (\r\n    <></>\r\n    // <div>\r\n    //   <p className=\"heading-txt\">Inbound Test</p>\r\n    //   <div className=\"container\">\r\n    //     {showResult ? (\r\n    //       <ShowResult score={score} totalScore={Question.length} />\r\n    //     ) : (\r\n    //       <>\r\n    //         <div className=\"question\">\r\n    //           <span id=\"question-number\">{currentQuestion + 1}. </span>\r\n    //           {/* <span id=\"question-txt\">\r\n    //             {Question[currentQuestion].question}\r\n    //           </span> */}\r\n    //         </div>\r\n    //         <div className=\"option-container\">\r\n    //           {Question[currentQuestion].options.map((option, i) => {\r\n    //             return (\r\n    //               <button\r\n    //                 // className=\"option-btn\"\r\n    //                 className={`option-btn ${\r\n    //                   clickedOption == i + 1 ? \"checked\" : null\r\n    //                 }`}\r\n    //                 key={i}\r\n    //                 onClick={() => setClickedOption(i + 1)}\r\n    //               >\r\n    //                 {option}\r\n    //               </button>\r\n    //             );\r\n    //           })}\r\n    //         </div>\r\n    //         <input\r\n    //           type=\"button\"\r\n    //           value=\"Next\"\r\n    //           id=\"next-button\"\r\n    //           onClick={changeQuestion}\r\n    //         />\r\n    //       </>\r\n    //     )}\r\n    //   </div>\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACD,QAAQ,EAAEE,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMkB,cAAc,GAAGA,CAAA,KAAM;IAC3BC,WAAW,CAAC,CAAC;IACb,IAAIT,eAAe,GAAGH,QAAQ,CAACa,MAAM,GAAG,CAAC,EAAE;MACzCT,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAC;MACvCK,gBAAgB,CAAC,CAAC,CAAC;IACrB,CAAC,MAAM;MACLE,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;EACD,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIL,aAAa,KAAKP,QAAQ,CAACG,eAAe,CAAC,CAACW,MAAM,EAAE;MACtDR,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACrB;EACF,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;;EAEA;EACAb,SAAS,CAAC,MAAM;IACd,MAAMuB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAC9B,2CACF,CAAC;QACDC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,SAAS,CAAC;QAC3B,IAAIJ,IAAI,EAAE;UACRd,WAAW,CAACc,IAAI,CAACI,SAAS,CAAC;QAC7B;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACC,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC;MAC5B;IACF,CAAC;IACDP,WAAW,CAAC,CAAC;IACbG,OAAO,CAACC,GAAG,CAACnB,QAAQ,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EACN,oBACED,OAAA,CAAAF,SAAA,mBAAI;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ,CAAC;AAACI,EAAA,CAxFID,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AA0Fd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}