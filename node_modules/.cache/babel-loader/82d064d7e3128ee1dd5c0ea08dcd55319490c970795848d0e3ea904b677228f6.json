{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TF\\\\Desktop\\\\Inbount\\\\client\\\\src\\\\components\\\\Spinner.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Spinner = () => {\n  _s();\n  const setLocalStorageWithTimestamp = () => {\n    const currentTime = new Date().getTime();\n    localStorage.setItem(\"myData\", JSON.stringify({\n      value: \"yourValue\",\n      timestamp: currentTime\n    }));\n  };\n  const checkAndRemoveLocalStorage = () => {\n    const storedData = localStorage.getItem(\"myData\");\n    if (storedData) {\n      const {\n        value,\n        timestamp\n      } = JSON.parse(storedData);\n      const currentTime = new Date().getTime();\n      const oneHourInMilliseconds = 60 * 60 * 1000;\n      if (currentTime - timestamp >= oneHourInMilliseconds) {\n        // One hour has passed, remove the item from localStorage\n        console.log(\"wellcome to localstorage\");\n        localStorage.removeItem(\"myData\");\n      }\n    }\n  };\n  useEffect(() => {\n    setLocalStorageWithTimestamp();\n\n    // Check and remove localStorage every minute (you can adjust the interval)\n    const interval = setInterval(() => {\n      checkAndRemoveLocalStorage();\n    }, 60000); // Check every minute\n\n    // Cleanup the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spinner_outer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner-border text-warning \",\n      role: \"status\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Spinner, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Spinner;\nexport default Spinner;\nvar _c;\n$RefreshReg$(_c, \"Spinner\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Spinner","_s","setLocalStorageWithTimestamp","currentTime","Date","getTime","localStorage","setItem","JSON","stringify","value","timestamp","checkAndRemoveLocalStorage","storedData","getItem","parse","oneHourInMilliseconds","console","log","removeItem","interval","setInterval","clearInterval","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/TF/Desktop/Inbount/client/src/components/Spinner.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nconst Spinner = () => {\r\n  const setLocalStorageWithTimestamp = () => {\r\n    const currentTime = new Date().getTime();\r\n    localStorage.setItem(\r\n      \"myData\",\r\n      JSON.stringify({ value: \"yourValue\", timestamp: currentTime })\r\n    );\r\n  };\r\n  const checkAndRemoveLocalStorage = () => {\r\n    const storedData = localStorage.getItem(\"myData\");\r\n    if (storedData) {\r\n      const { value, timestamp } = JSON.parse(storedData);\r\n      const currentTime = new Date().getTime();\r\n      const oneHourInMilliseconds = 60 * 60 * 1000;\r\n\r\n      if (currentTime - timestamp >= oneHourInMilliseconds) {\r\n        // One hour has passed, remove the item from localStorage\r\n        console.log(\"wellcome to localstorage\");\r\n        localStorage.removeItem(\"myData\");\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setLocalStorageWithTimestamp();\r\n\r\n    // Check and remove localStorage every minute (you can adjust the interval)\r\n    const interval = setInterval(() => {\r\n      checkAndRemoveLocalStorage();\r\n    }, 60000); // Check every minute\r\n\r\n    // Cleanup the interval when the component unmounts\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return (\r\n    <div className=\"spinner_outer\">\r\n      <div className=\"spinner-border text-warning \" role=\"status\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,4BAA4B,GAAGA,CAAA,KAAM;IACzC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACxCC,YAAY,CAACC,OAAO,CAClB,QAAQ,EACRC,IAAI,CAACC,SAAS,CAAC;MAAEC,KAAK,EAAE,WAAW;MAAEC,SAAS,EAAER;IAAY,CAAC,CAC/D,CAAC;EACH,CAAC;EACD,MAAMS,0BAA0B,GAAGA,CAAA,KAAM;IACvC,MAAMC,UAAU,GAAGP,YAAY,CAACQ,OAAO,CAAC,QAAQ,CAAC;IACjD,IAAID,UAAU,EAAE;MACd,MAAM;QAAEH,KAAK;QAAEC;MAAU,CAAC,GAAGH,IAAI,CAACO,KAAK,CAACF,UAAU,CAAC;MACnD,MAAMV,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MACxC,MAAMW,qBAAqB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAE5C,IAAIb,WAAW,GAAGQ,SAAS,IAAIK,qBAAqB,EAAE;QACpD;QACAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvCZ,YAAY,CAACa,UAAU,CAAC,QAAQ,CAAC;MACnC;IACF;EACF,CAAC;EACDtB,SAAS,CAAC,MAAM;IACdK,4BAA4B,CAAC,CAAC;;IAE9B;IACA,MAAMkB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCT,0BAA0B,CAAC,CAAC;IAC9B,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX;IACA,OAAO,MAAMU,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EACN,oBACErB,OAAA;IAAKwB,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5BzB,OAAA;MAAKwB,SAAS,EAAC,8BAA8B;MAACE,IAAI,EAAC,QAAQ;MAAAD,QAAA,eACzDzB,OAAA;QAAMwB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAxCID,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AA0Cb,eAAeA,OAAO;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}