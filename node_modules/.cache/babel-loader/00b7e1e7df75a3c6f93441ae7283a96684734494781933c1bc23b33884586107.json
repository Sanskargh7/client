{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TF\\\\Desktop\\\\hubspotTest\\\\client\\\\src\\\\components\\\\Question.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import ReactWebcam from \"react-webcam\";\n// import ShowResult from \"./ShowResult\";\n// import axios from \"axios\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import { useAuth } from \"../context/auth\";\n// import { QuizData } from \"../quizData\";\n\n// function Question() {\n//   const navigate = useNavigate();\n//   const [Question, setQuestion] = useState(QuizData);\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\n\n//   const [Timer, seTimer] = useState(\"\");\n//   const [auth, setAuth] = useAuth();\n//   const [Update, setUpdate] = useState(QuizData);\n//   const [Clicked, setClicked] = useState(false);\n\n//   const calculateAnswer = () => {\n//     // if (!Clicked) {\n//     //   window.alert(\"answer is required\");\n//     // } else {\n//     setCurrentQuestion(currentQuestion + 1);\n//     setClicked(false);\n//     // }\n//   };\n\n//   function startTimer(duration) {\n//     let timer = duration;\n\n//     const interval = setInterval(function () {\n//       const hours = Math.floor(timer / 3600);\n//       const minutes = Math.floor((timer % 3600) / 60);\n//       const seconds = timer % 60;\n\n//       const formattedTime =\n//         (hours < 10 ? \"0\" : \"\") +\n//         hours +\n//         \":\" +\n//         (minutes < 10 ? \"0\" : \"\") +\n//         minutes +\n//         \":\" +\n//         (seconds < 10 ? \"0\" : \"\") +\n//         seconds;\n\n//       seTimer(formattedTime);\n\n//       if (--timer < 0) {\n//         clearInterval(interval);\n//         seTimer(\"00:00:00\");\n//       }\n//     }, 1000);\n//   }\n//   //get all question from database\n\n//   //lifecycle hooks\n//   // useEffect(() => {\n//   //   const getQuestion = async () => {\n//   //     try {\n//   //       const { data } = await axios.post(\n//   //         \"https://assessment.inboundacademy.in/api/user/questions\",\n//   //         {\n//   //           hindi: \"3\",\n\n//   //           english: \"3\",\n\n//   //           math: \"3\",\n//   //         }\n//   //       );\n\n//   //       if (data) {\n//   //         console.log(data);\n//   //         setQuestion(data.data);\n\n//   //         setUpdate(data.data);\n//   //       }\n//   //     } catch (error) {\n//   //       console.log(error.message);\n//   //     }\n//   //   };\n//   //   getQuestion();\n//   //   {\n//   //   }\n//   // }, []);\n\n//   // useEffect(() => {\n//   //   startTimer(3600);\n//   // }, []);\n//   function changeHandleer(e) {\n//     setClicked(true);\n//     console.log(e.target.value);\n//     const userAnswer = Number(e.target.value);\n//     Update.forEach((item) => {\n//       if (item._id === Question[currentQuestion]._id) {\n//         item.answer = userAnswer;\n//       }\n//     });\n//   }\n\n//   // onsubmit\n//   const onSubmitHandler = () => {\n//     let userAnswer = 0;\n//     Question.forEach((item) => {\n//       console.log(item._id);\n//       Update.forEach((userItem) => {\n//         console.log(userItem._id);\n//         if (userItem._id === item._id && userItem.answer === item.answer) {\n//           userAnswer = +1;\n//         }\n//       });\n//     });\n//     console.log(userAnswer);\n//     setAuth({ ...auth, score: userAnswer, length: Question.length });\n//     navigate(\"/result\");\n//   };\n//   return (\n//     <div className=\"content_wraper\">\n//       <div className=\"logo\">\n//         <div className=\"container\">\n//           <a target=\"_blank\" href=\"https://www.inboundacademy.in/\">\n//             <img src=\"images/inbound-academy-logo.webp\" alt=\"Logo\" />\n//           </a>\n//         </div>\n//       </div>\n//       <div className=\"body_content\">\n//         <div className=\"container\">\n//           <div className=\"exam_wrap\">\n//             <div className=\"exam_title\">\n//               <h1>Salesforce Administrator Certification Practice Test</h1>\n//             </div>\n//             {/* <ReactWebcam height={200} width={200} /> */}\n\n//             <div className=\"exam_time\">\n//               Time Remaining: &nbsp;{Timer}\n//               <strong>\n//                 <span id=\"timer\"></span>\n//               </strong>\n//             </div>\n//             <div className=\"exam_qustions\">\n//               <div className=\"qus_nums\">{`${currentQuestion + 1} of ${\n//                 Question.length\n//               }`}</div>\n//               <div className=\"qus_ans\">\n//                 <div className=\"qustion\">\n//                   {Question?.[currentQuestion]?.question}\n//                 </div>\n\n//                 <div className=\"qustion_mcqs\">\n//                   <ul type=\"A\">\n//                     {Question?.[currentQuestion]?.options?.map(\n//                       (option, index) => (\n//                         <li key={index}>\n//                           <span>\n//                             <input\n//                               type=\"radio\"\n//                               name={`ques_${currentQuestion}`}\n//                               value={index + 1}\n//                               id={\n//                                 Question?.[currentQuestion]?._id + `_${index}`\n//                               }\n//                               onChange={changeHandleer}\n//                             />\n//                             <label\n//                               htmlFor={\n//                                 Question?.[currentQuestion]?._id + `_${index}`\n//                               }\n//                             >\n//                               {option}\n//                             </label>\n//                           </span>\n//                         </li>\n//                       )\n//                     )}\n//                   </ul>\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"exam_qustions_btns text-right\">\n//               {currentQuestion >= 1 ? (\n//                 <button\n//                   onClick={() => setCurrentQuestion(currentQuestion - 1)}\n//                   className=\" btn\"\n//                 >\n//                   <i className=\"fa-solid fa-angles-left\"></i>&nbsp;Back\n//                 </button>\n//               ) : (\n//                 \"\"\n//               )}\n\n//               {currentQuestion + 1 === Question.length ? (\n//                 // <Link className=\"btn\" to={\"/result\"}>\n//                 //   Submit Exam\n//                 // </Link>\n//                 <button className=\"btn\" onClick={onSubmitHandler}>\n//                   Submit Exam\n//                 </button>\n//               ) : (\n//                 <button onClick={() => calculateAnswer()} className=\"btn\">\n//                   Next&nbsp;<i className=\"fa-solid fa-angles-right\"></i>\n//                 </button>\n//               )}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <footer className=\"text-center\">\n//         <div className=\"container\">\n//           Copyright Â© 2023.{\" \"}\n//           <a href=\"https://www.transfunnel.com/\" target=\"_blank\">\n//             TransFunnel Consulting\n//           </a>\n//         </div>\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default Question;\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Question = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const handleOptionSelect = (questionId, optionId) => {\n    setSelectedOptions(prevSelected => ({\n      ...prevSelected,\n      [questionId]: optionId\n    }));\n  };\n\n  // Example array of questions\n  const questions = [{\n    id: 1,\n    text: \"Question 1: What is...\",\n    options: [\"Option A\", \"Option B\", \"Option C\"]\n  }, {\n    id: 2,\n    text: \"Question 1: What is...\",\n    options: [\"Option A\", \"Option B\", \"Option C\"]\n  }, {\n    id: 3,\n    text: \"Question 1: What is...\",\n    options: [\"Option A\", \"Option B\", \"Option C\"]\n  }, {\n    id: 4,\n    text: \"Question 1: What is...\",\n    options: [\"Option A\", \"Option B\", \"Option C\"]\n  }, {\n    id: 5,\n    text: \"Question 1: What is...\",\n    options: [\"Option A\", \"Option B\", \"Option C\"]\n  }, {\n    id: 6,\n    text: \"Question 1: What is...\",\n    options: [\"Option A\", \"Option B\", \"Option C\"]\n  }, {\n    id: 7,\n    text: \"Question 1: What is...\",\n    options: [\"Option A\", \"Option B\", \"Option C\"]\n  }\n  // ... more questions ...\n  ];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), question.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: `question-${question.id}`,\n          checked: selectedOptions[question.id] === index,\n          onChange: () => handleOptionSelect(question.id, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }, this), option]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 13\n      }, this))]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(Question, \"dLRHIO/SyIp9lHMf8Crrz2iKqk4=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Question","_s","selectedOptions","setSelectedOptions","handleOptionSelect","questionId","optionId","prevSelected","questions","id","text","options","children","map","question","fileName","_jsxFileName","lineNumber","columnNumber","option","index","type","name","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/TF/Desktop/hubspotTest/client/src/components/Question.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import ReactWebcam from \"react-webcam\";\r\n// import ShowResult from \"./ShowResult\";\r\n// import axios from \"axios\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n// import { useAuth } from \"../context/auth\";\r\n// import { QuizData } from \"../quizData\";\r\n\r\n// function Question() {\r\n//   const navigate = useNavigate();\r\n//   const [Question, setQuestion] = useState(QuizData);\r\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\r\n\r\n//   const [Timer, seTimer] = useState(\"\");\r\n//   const [auth, setAuth] = useAuth();\r\n//   const [Update, setUpdate] = useState(QuizData);\r\n//   const [Clicked, setClicked] = useState(false);\r\n\r\n//   const calculateAnswer = () => {\r\n//     // if (!Clicked) {\r\n//     //   window.alert(\"answer is required\");\r\n//     // } else {\r\n//     setCurrentQuestion(currentQuestion + 1);\r\n//     setClicked(false);\r\n//     // }\r\n//   };\r\n\r\n//   function startTimer(duration) {\r\n//     let timer = duration;\r\n\r\n//     const interval = setInterval(function () {\r\n//       const hours = Math.floor(timer / 3600);\r\n//       const minutes = Math.floor((timer % 3600) / 60);\r\n//       const seconds = timer % 60;\r\n\r\n//       const formattedTime =\r\n//         (hours < 10 ? \"0\" : \"\") +\r\n//         hours +\r\n//         \":\" +\r\n//         (minutes < 10 ? \"0\" : \"\") +\r\n//         minutes +\r\n//         \":\" +\r\n//         (seconds < 10 ? \"0\" : \"\") +\r\n//         seconds;\r\n\r\n//       seTimer(formattedTime);\r\n\r\n//       if (--timer < 0) {\r\n//         clearInterval(interval);\r\n//         seTimer(\"00:00:00\");\r\n//       }\r\n//     }, 1000);\r\n//   }\r\n//   //get all question from database\r\n\r\n//   //lifecycle hooks\r\n//   // useEffect(() => {\r\n//   //   const getQuestion = async () => {\r\n//   //     try {\r\n//   //       const { data } = await axios.post(\r\n//   //         \"https://assessment.inboundacademy.in/api/user/questions\",\r\n//   //         {\r\n//   //           hindi: \"3\",\r\n\r\n//   //           english: \"3\",\r\n\r\n//   //           math: \"3\",\r\n//   //         }\r\n//   //       );\r\n\r\n//   //       if (data) {\r\n//   //         console.log(data);\r\n//   //         setQuestion(data.data);\r\n\r\n//   //         setUpdate(data.data);\r\n//   //       }\r\n//   //     } catch (error) {\r\n//   //       console.log(error.message);\r\n//   //     }\r\n//   //   };\r\n//   //   getQuestion();\r\n//   //   {\r\n//   //   }\r\n//   // }, []);\r\n\r\n//   // useEffect(() => {\r\n//   //   startTimer(3600);\r\n//   // }, []);\r\n//   function changeHandleer(e) {\r\n//     setClicked(true);\r\n//     console.log(e.target.value);\r\n//     const userAnswer = Number(e.target.value);\r\n//     Update.forEach((item) => {\r\n//       if (item._id === Question[currentQuestion]._id) {\r\n//         item.answer = userAnswer;\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   // onsubmit\r\n//   const onSubmitHandler = () => {\r\n//     let userAnswer = 0;\r\n//     Question.forEach((item) => {\r\n//       console.log(item._id);\r\n//       Update.forEach((userItem) => {\r\n//         console.log(userItem._id);\r\n//         if (userItem._id === item._id && userItem.answer === item.answer) {\r\n//           userAnswer = +1;\r\n//         }\r\n//       });\r\n//     });\r\n//     console.log(userAnswer);\r\n//     setAuth({ ...auth, score: userAnswer, length: Question.length });\r\n//     navigate(\"/result\");\r\n//   };\r\n//   return (\r\n//     <div className=\"content_wraper\">\r\n//       <div className=\"logo\">\r\n//         <div className=\"container\">\r\n//           <a target=\"_blank\" href=\"https://www.inboundacademy.in/\">\r\n//             <img src=\"images/inbound-academy-logo.webp\" alt=\"Logo\" />\r\n//           </a>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"body_content\">\r\n//         <div className=\"container\">\r\n//           <div className=\"exam_wrap\">\r\n//             <div className=\"exam_title\">\r\n//               <h1>Salesforce Administrator Certification Practice Test</h1>\r\n//             </div>\r\n//             {/* <ReactWebcam height={200} width={200} /> */}\r\n\r\n//             <div className=\"exam_time\">\r\n//               Time Remaining: &nbsp;{Timer}\r\n//               <strong>\r\n//                 <span id=\"timer\"></span>\r\n//               </strong>\r\n//             </div>\r\n//             <div className=\"exam_qustions\">\r\n//               <div className=\"qus_nums\">{`${currentQuestion + 1} of ${\r\n//                 Question.length\r\n//               }`}</div>\r\n//               <div className=\"qus_ans\">\r\n//                 <div className=\"qustion\">\r\n//                   {Question?.[currentQuestion]?.question}\r\n//                 </div>\r\n\r\n//                 <div className=\"qustion_mcqs\">\r\n//                   <ul type=\"A\">\r\n//                     {Question?.[currentQuestion]?.options?.map(\r\n//                       (option, index) => (\r\n//                         <li key={index}>\r\n//                           <span>\r\n//                             <input\r\n//                               type=\"radio\"\r\n//                               name={`ques_${currentQuestion}`}\r\n//                               value={index + 1}\r\n//                               id={\r\n//                                 Question?.[currentQuestion]?._id + `_${index}`\r\n//                               }\r\n//                               onChange={changeHandleer}\r\n//                             />\r\n//                             <label\r\n//                               htmlFor={\r\n//                                 Question?.[currentQuestion]?._id + `_${index}`\r\n//                               }\r\n//                             >\r\n//                               {option}\r\n//                             </label>\r\n//                           </span>\r\n//                         </li>\r\n//                       )\r\n//                     )}\r\n//                   </ul>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"exam_qustions_btns text-right\">\r\n//               {currentQuestion >= 1 ? (\r\n//                 <button\r\n//                   onClick={() => setCurrentQuestion(currentQuestion - 1)}\r\n//                   className=\" btn\"\r\n//                 >\r\n//                   <i className=\"fa-solid fa-angles-left\"></i>&nbsp;Back\r\n//                 </button>\r\n//               ) : (\r\n//                 \"\"\r\n//               )}\r\n\r\n//               {currentQuestion + 1 === Question.length ? (\r\n//                 // <Link className=\"btn\" to={\"/result\"}>\r\n//                 //   Submit Exam\r\n//                 // </Link>\r\n//                 <button className=\"btn\" onClick={onSubmitHandler}>\r\n//                   Submit Exam\r\n//                 </button>\r\n//               ) : (\r\n//                 <button onClick={() => calculateAnswer()} className=\"btn\">\r\n//                   Next&nbsp;<i className=\"fa-solid fa-angles-right\"></i>\r\n//                 </button>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <footer className=\"text-center\">\r\n//         <div className=\"container\">\r\n//           Copyright Â© 2023.{\" \"}\r\n//           <a href=\"https://www.transfunnel.com/\" target=\"_blank\">\r\n//             TransFunnel Consulting\r\n//           </a>\r\n//         </div>\r\n//       </footer>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Question;\r\nimport React, { useState } from \"react\";\r\n\r\nconst Question = () => {\r\n  const [selectedOptions, setSelectedOptions] = useState({});\r\n\r\n  const handleOptionSelect = (questionId, optionId) => {\r\n    setSelectedOptions((prevSelected) => ({\r\n      ...prevSelected,\r\n      [questionId]: optionId,\r\n    }));\r\n  };\r\n\r\n  // Example array of questions\r\n  const questions = [\r\n    {\r\n      id: 1,\r\n      text: \"Question 1: What is...\",\r\n      options: [\"Option A\", \"Option B\", \"Option C\"],\r\n    },\r\n    {\r\n      id: 2,\r\n      text: \"Question 1: What is...\",\r\n      options: [\"Option A\", \"Option B\", \"Option C\"],\r\n    },\r\n    {\r\n      id: 3,\r\n      text: \"Question 1: What is...\",\r\n      options: [\"Option A\", \"Option B\", \"Option C\"],\r\n    },\r\n    {\r\n      id: 4,\r\n      text: \"Question 1: What is...\",\r\n      options: [\"Option A\", \"Option B\", \"Option C\"],\r\n    },\r\n    {\r\n      id: 5,\r\n      text: \"Question 1: What is...\",\r\n      options: [\"Option A\", \"Option B\", \"Option C\"],\r\n    },\r\n    {\r\n      id: 6,\r\n      text: \"Question 1: What is...\",\r\n      options: [\"Option A\", \"Option B\", \"Option C\"],\r\n    },\r\n    {\r\n      id: 7,\r\n      text: \"Question 1: What is...\",\r\n      options: [\"Option A\", \"Option B\", \"Option C\"],\r\n    },\r\n    // ... more questions ...\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      {questions.map((question) => (\r\n        <div key={question.id}>\r\n          <p>{question.text}</p>\r\n          {question.options.map((option, index) => (\r\n            <label key={index}>\r\n              <input\r\n                type=\"radio\"\r\n                name={`question-${question.id}`}\r\n                checked={selectedOptions[question.id] === index}\r\n                onChange={() => handleOptionSelect(question.id, index)}\r\n              />\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE1D,MAAMO,kBAAkB,GAAGA,CAACC,UAAU,EAAEC,QAAQ,KAAK;IACnDH,kBAAkB,CAAEI,YAAY,KAAM;MACpC,GAAGA,YAAY;MACf,CAACF,UAAU,GAAGC;IAChB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,SAAS,GAAG,CAChB;IACEC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU;EAC9C,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU;EAC9C,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU;EAC9C,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU;EAC9C,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU;EAC9C,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU;EAC9C,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU;EAC9C;EACA;EAAA,CACD;;EAED,oBACEZ,OAAA;IAAAa,QAAA,EACGJ,SAAS,CAACK,GAAG,CAAEC,QAAQ,iBACtBf,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,EAAIE,QAAQ,CAACJ;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACrBJ,QAAQ,CAACH,OAAO,CAACE,GAAG,CAAC,CAACM,MAAM,EAAEC,KAAK,kBAClCrB,OAAA;QAAAa,QAAA,gBACEb,OAAA;UACEsB,IAAI,EAAC,OAAO;UACZC,IAAI,EAAG,YAAWR,QAAQ,CAACL,EAAG,EAAE;UAChCc,OAAO,EAAErB,eAAe,CAACY,QAAQ,CAACL,EAAE,CAAC,KAAKW,KAAM;UAChDI,QAAQ,EAAEA,CAAA,KAAMpB,kBAAkB,CAACU,QAAQ,CAACL,EAAE,EAAEW,KAAK;QAAE;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC,EACDC,MAAM;MAAA,GAPGC,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQV,CACR,CAAC;IAAA,GAZMJ,QAAQ,CAACL,EAAE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAahB,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjB,EAAA,CAtEID,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAwEd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}